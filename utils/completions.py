from typing import List

from openai import OpenAI
from tenacity import retry, stop_after_attempt, wait_random


def generate_transcript_segments(client: OpenAI, transcript: str) -> str:
    """Chat completion call to segment transcript.

    Args:
        client (OpenAI): OpenAI Client.
        transcript (str): Original transcript.

    Returns:
        str: Segmented transcript.
    """

    # issues with f-strings and .format()
    # TODO: might want to use instructor
    PROMPT = (
        """
    <Task Instructions>
    You are provided with the full <transcript> of a conversation or discussion. Your task is to analyze this transcript and neatly divide it into distinct thematic sections based on shifts in topics or when detailed technical discussions occur.

    <transcript>
    %s
    </transcript>

    <Output Format>
    Your analysis must be presented in JSON format from the beginning with the structure as follows:

    [
        {
            "start": "hh:mm:ss,ms",
            "end": "hh:mm:ss,ms",
            "header": "Topic or theme of the discussion"
        },
        ...
    ]

    <Requirements for Each Segment>
    - start: Indicates the starting time of the segment, formatted as "hours:minutes:seconds,milliseconds". It is crucial to format times accurately, perhaps utilizing Pythonâ€™s datetime formatting tools like strftime() if necessary.
    - end: Ends right before a new topic starts, ensuring a clear transition, formatted similarly to the start.
    - header: Provides a concise yet descriptive title of the main topic or theme discussed in this segment.

    <Procedure>
    1. Carefully review the transcript provided.
    2. Pinpoint and delineate the shifts in conversation topics or the periods of technical discussion.
    3. Use accurate timestamps to demarcate the start and end of each segment using the specified time format.
    4. Summarize the primary topic or discussion point of each segment within the header attribute.

    <Ensure that the segments>
    1. Are non-overlapping and collectively encompass the entire duration of the transcript.
    2. Are not short.
    2. Adhere strictly to the provided JSON output format to ensure full compatibility with downstream processing systems.

    <Example Application>
    For instance, if you are analyzing a transcript from a discussion about AI research with a focus on a multilayer perceptron (MLP), you would:
    1. Identify and segment discussions about research papers and demonstrations of coding implementations related to various components of the MLP.
    2. Carefully assign accurate timestamps to mark the beginning and end of each focused discussion or technical explanation.
    3. Develop concise titles for each segment that aptly capture the essence of the topics discussed, ensuring compatibility with JSON structure requirements.
    """
        % transcript
    )
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "system",
                "content": "You are an expert in identifying shifts in conversation and topic discussion from a video transcript.",
            },
            {"role": "user", "content": PROMPT},
        ],
    )
    content: str = response.choices[0].message.content  # type: ignore
    if not content.startswith("[") or content.endswith("]"):
        # hackish attempt in view of json output not achieved
        content = content.lstrip("```json")
        content = content.rstrip("```")
    return content


@retry(stop=stop_after_attempt(3), wait=wait_random(min=1, max=2))
def generate_md_section(client: OpenAI, transcript: str, b64_imgs: List[str]) -> str:
    """Chat completion call to generate markdown content.

    Args:
        client (OpenAI): OpenAI Client.
        transcript (str): Transcript content.
        b64_imgs (List[str]): List of base64-encoded frames.

    Returns:
        str: Generated content.
    """

    PROMPT = f"""
    Task Instructions:
    You have been provided with images of a video captured at various timestamps and a corresponding <transcript> generated by an AI speech recognition tool which may contain errors. Your task is to transform this transcript into a markdown-formatted blog post following these guidelines:

    1. Markdown Formatting: Ensure the output is in valid markdown format.
    2. Structure and Headings: Insert appropriate section headings and apply formatting typical of a blog post or textbook. Do not include introductory or concluding paragraphs.
    3. Image Selection and Insertion:
        - Selection Criteria: Choose 1-3 key images that best illustrate and are most relevant to the discussed topics. Prefer images that show complete information, such as code snapshots or architecture diagrams.
        - Alignment: **IMPORTANT** Make sure that the images you include align with the surrounding text content to ensure context relevance.
        - Insertion Syntax: Use the following HTML tag to insert images: <img src="hh_mm_ss.jpg"/>, where hh_mm_ss corresponds to the timestamp located at the top left of the image
        - Add line break after each image inserted.
        - Do not attach two images consecutively without intervening text. Ensure that each image is followed by relevant text to maintain readability.
    4. Content Editing:
        - Rewrite any noisy or unclear parts of the transcript.
        - Remove verbal tics and redundant information, mentioning each piece only once.
        - Maintain the conversational style of the original transcript.
        - Transcribe important code snippets and other valuable text when relevant.
    5. Layout and Style:
        - Use styling that aligns with typical blog or textbook presentations, including text, code, and callouts.
        - Do not add extraneous details not mentioned in the transcript or depicted in the images.
    6. Review Before Responding:
        - Before finalizing your response, review your work to ensure that all guidelines have been followed accurately.
        - Check for grammatical errors, adherence to markdown syntax, correct image timestamps, and overall coherence in the narrative.

    Note:
    1. Do not create a separate conclusion or summary section.
    2. Exclude markdown code block snippets (e.g., markdown).

    <transcript>
    {transcript}
    </transcript>
    """

    messages = [
        {
            "role": "system",
            "content": "you are an expert with keen eyes in identify timestamps and writing technical blogpost.",
        },
        {
            "role": "user",
            "content": [*map(lambda x: {"image": x, "resize": 768}, b64_imgs), PROMPT],
        },
    ]

    params = {"model": "gpt-4o", "messages": messages, "temperature": 0}
    response = client.chat.completions.create(**params)
    content = response.choices[0].message.content  # type: ignore

    return content


def proofread_and_finalize_content(client: OpenAI, content: str) -> str:
    """Chat completion call to proofread and finalize content.

    Args:
        client (OpenAI): OpenAI Client.
        content (str): Markdown content.

    Returns:
        str: Generated content.
    """

    PROMPT = f"""
    Please proofread the following markdown content, focusing exclusively on correcting grammar, punctuation, formatting errors, and removing all line dividers or separators. 
    Ensure that all section headers are appropriately adjusted for consistency and clarity. 
    Do not add any additional content or conclusions. 
    Provide the corrected markdown content only, without any extra text or markdown code block snippet.

    <markdown>
    {content}
    </markdown>
    """
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "system",
                "content": "You are an expert proofreader that strictly follows instructions.",
            },
            {"role": "user", "content": PROMPT},
        ],
    )
    return response.choices[0].message.content  # type: ignore
